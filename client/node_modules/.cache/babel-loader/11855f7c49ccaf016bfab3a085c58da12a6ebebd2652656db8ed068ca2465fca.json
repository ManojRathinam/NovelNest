{"ast":null,"code":"var _jsxFileName = \"E:\\\\Manoj\\\\KMS\\\\NovelNest\\\\client\\\\src\\\\pages\\\\DeleteStory.jsx\",\n  _s = $RefreshSig$();\n// Corrected DeleteStory.jsx\nimport React, { useContext, useEffect, useState } from 'react';\nimport { UserContext } from '../context/userContext';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport Loader from '../components/Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeleteStory = ({\n  postId\n}) => {\n  _s();\n  const {\n    currentUser\n  } = useContext(UserContext);\n  const navigate = useNavigate();\n  const token = currentUser === null || currentUser === void 0 ? void 0 : currentUser.token;\n  const location = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Redirect to login page if user is not logged in\n  useEffect(() => {\n    if (!token) {\n      navigate('/login');\n    }\n  }, [token, navigate]);\n  const removePost = async () => {\n    setIsLoading(true);\n    try {\n      const response = await axios.delete(`${process.env.REACT_APP_BASE_URL}/posts/${postId}`, {\n        withCredentials: true,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 200) {\n        // Update the state or use another method to reflect changes without refreshing the page\n        navigate('/myposts');\n      }\n      setIsLoading(false);\n    } catch (error) {\n      console.log(\"Couldn't delete post.\");\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"btn sm danger\",\n    onClick: removePost,\n    children: \"Delete\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(DeleteStory, \"T3/VcdrozqqYXvIPf71L2Q8t2fY=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = DeleteStory;\nexport default DeleteStory;\nvar _c;\n$RefreshReg$(_c, \"DeleteStory\");","map":{"version":3,"names":["React","useContext","useEffect","useState","UserContext","useNavigate","useLocation","axios","Loader","jsxDEV","_jsxDEV","DeleteStory","postId","_s","currentUser","navigate","token","location","isLoading","setIsLoading","removePost","response","delete","process","env","REACT_APP_BASE_URL","withCredentials","headers","Authorization","status","error","console","log","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","children","_c","$RefreshReg$"],"sources":["E:/Manoj/KMS/NovelNest/client/src/pages/DeleteStory.jsx"],"sourcesContent":["// Corrected DeleteStory.jsx\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { UserContext } from '../context/userContext';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport axios from 'axios'\r\nimport Loader from '../components/Loader';\r\n\r\nconst DeleteStory = ({ postId }) => {\r\n  const { currentUser } = useContext(UserContext);\r\n  const navigate = useNavigate();\r\n  const token = currentUser?.token;\r\n\r\n  const location = useLocation()\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  \r\n  // Redirect to login page if user is not logged in\r\n  useEffect(() => {\r\n    if (!token) {\r\n      navigate('/login');\r\n    }\r\n  }, [token, navigate]);\r\n  \r\n  const removePost = async () => {\r\n    setIsLoading(true)\r\n    try {\r\n      const response = await axios.delete(`${process.env.REACT_APP_BASE_URL}/posts/${postId}`, {withCredentials: true, headers: {Authorization: `Bearer ${token}`}})\r\n      if(response.status === 200){\r\n        // Update the state or use another method to reflect changes without refreshing the page\r\n        navigate('/myposts');\r\n      }\r\n      setIsLoading(false)\r\n    } catch (error) {\r\n      console.log(\"Couldn't delete post.\")\r\n    }\r\n  }\r\n  \r\n  if(isLoading){\r\n    return <Loader/>\r\n  }\r\n\r\n  return (\r\n    <button className='btn sm danger' onClick={removePost}>Delete</button>\r\n  )\r\n}\r\n\r\nexport default DeleteStory\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM;IAAEC;EAAY,CAAC,GAAGb,UAAU,CAACG,WAAW,CAAC;EAC/C,MAAMW,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,KAAK,GAAGF,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEE,KAAK;EAEhC,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACAD,SAAS,CAAC,MAAM;IACd,IAAI,CAACc,KAAK,EAAE;MACVD,QAAQ,CAAC,QAAQ,CAAC;IACpB;EACF,CAAC,EAAE,CAACC,KAAK,EAAED,QAAQ,CAAC,CAAC;EAErB,MAAMK,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7BD,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMd,KAAK,CAACe,MAAM,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,kBAAmB,UAASb,MAAO,EAAC,EAAE;QAACc,eAAe,EAAE,IAAI;QAAEC,OAAO,EAAE;UAACC,aAAa,EAAG,UAASZ,KAAM;QAAC;MAAC,CAAC,CAAC;MAC9J,IAAGK,QAAQ,CAACQ,MAAM,KAAK,GAAG,EAAC;QACzB;QACAd,QAAQ,CAAC,UAAU,CAAC;MACtB;MACAI,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACtC;EACF,CAAC;EAED,IAAGd,SAAS,EAAC;IACX,oBAAOR,OAAA,CAACF,MAAM;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAClB;EAEA,oBACE1B,OAAA;IAAQ2B,SAAS,EAAC,eAAe;IAACC,OAAO,EAAElB,UAAW;IAAAmB,QAAA,EAAC;EAAM;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAE1E,CAAC;AAAAvB,EAAA,CApCKF,WAAW;EAAA,QAEEN,WAAW,EAGXC,WAAW;AAAA;AAAAkC,EAAA,GALxB7B,WAAW;AAsCjB,eAAeA,WAAW;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}