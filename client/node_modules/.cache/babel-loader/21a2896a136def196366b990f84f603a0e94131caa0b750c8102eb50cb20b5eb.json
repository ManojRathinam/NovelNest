{"ast":null,"code":"var _jsxFileName = \"E:\\\\Manoj\\\\KMS\\\\NovelNest\\\\client\\\\src\\\\pages\\\\CreateStory.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { UserContext } from '../context/userContext';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateStory = () => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [category, setCategory] = useState('Uncategorized');\n  const [description, setDescription] = useState('');\n  const [thumbnail, setThumbnail] = useState('');\n  const [error, setError] = useState('');\n  const {\n    currentUser\n  } = useContext(UserContext);\n  const navigate = useNavigate(); // Moved inside component body\n  const token = currentUser === null || currentUser === void 0 ? void 0 : currentUser.token;\n\n  // Redirect to login page if user is not logged in\n  useEffect(() => {\n    if (!token) {\n      navigate('/login');\n    }\n  }, [token, navigate]); // Added dependencies to useEffect\n\n  const modules = {\n    toolbar: [[{\n      'header': [1, 2, 3, 4, 5, 6, false]\n    }], ['bold', 'italic', 'underline', 'strike', 'blockquote'], [{\n      'list': 'ordered'\n    }, {\n      'list': 'bullet'\n    }, {\n      'indent': '-1'\n    }, {\n      'indent': '+1'\n    }], ['link', 'image'], ['clean']]\n  };\n  const formats = ['header', 'bold', 'italic', 'strike', 'blockquote', 'list', 'bullet', 'indent', 'link', 'image'];\n  const POST_CATEGORIES = [\"Adventure\", \"Fiction\", \"Horror\", \"Mystery\", \"Paranomal\", \"ScienceFiction\",\n  // Corrected value\n  \"Thriller\", \"Fantasy\", \"Humor\", \"Romance\", \"Historical Fiction\"];\n  const createPost = async e => {\n    e.preventDefault();\n    const postData = new FormData();\n    postData.set('title', title);\n    postData.set('category', category === 'Science Fiction' ? 'ScienceFiction' : category); // Send 'ScienceFiction' instead of 'Science Fiction' if needed\n    postData.set('description', description);\n    postData.set('thumbnail', thumbnail);\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_BASE_URL}/posts`, postData, {\n        withCredentials: true,\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 201) {\n        return navigate('/');\n      }\n    } catch (err) {\n      console.error(err);\n      setError('An error occurred while creating the story.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"create-post\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create a Story\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form create_form\",\n        onSubmit: createPost,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Title\",\n          value: title,\n          onChange: e => setTitle(e.target.value),\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"category\",\n          value: category,\n          onChange: e => setCategory(e.target.value),\n          children: POST_CATEGORIES.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n            children: cat\n          }, cat, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 42\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n          modules: modules,\n          formats: formats,\n          value: description,\n          onChange: setDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: e => setThumbnail(e.target.files[0]),\n          accept: \"image/png,image/jpeg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn primary\",\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateStory, \"DElvctnEpVP7U0lFdjNVEZOS2kY=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateStory;\nexport default CreateStory;\nvar _c;\n$RefreshReg$(_c, \"CreateStory\");","map":{"version":3,"names":["React","useState","useContext","useEffect","ReactQuill","UserContext","useNavigate","axios","jsxDEV","_jsxDEV","CreateStory","_s","title","setTitle","category","setCategory","description","setDescription","thumbnail","setThumbnail","error","setError","currentUser","navigate","token","modules","toolbar","formats","POST_CATEGORIES","createPost","e","preventDefault","postData","FormData","set","response","post","process","env","REACT_APP_BASE_URL","withCredentials","headers","Authorization","status","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","autoFocus","name","map","cat","files","accept","_c","$RefreshReg$"],"sources":["E:/Manoj/KMS/NovelNest/client/src/pages/CreateStory.jsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { UserContext } from '../context/userContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst CreateStory = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [category, setCategory] = useState('Uncategorized');\r\n  const [description, setDescription] = useState('');\r\n  const [thumbnail, setThumbnail] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const { currentUser } = useContext(UserContext);\r\n  const navigate = useNavigate(); // Moved inside component body\r\n  const token = currentUser?.token;\r\n  \r\n  // Redirect to login page if user is not logged in\r\n  useEffect(() => {\r\n    if (!token) {\r\n      navigate('/login');\r\n    }\r\n  }, [token, navigate]); // Added dependencies to useEffect\r\n\r\n  const modules = {\r\n    toolbar: [\r\n      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n      ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n      [{ 'list': 'ordered' }, { 'list': 'bullet' }, { 'indent': '-1' }, { 'indent': '+1' }],\r\n      ['link', 'image'],\r\n      ['clean']\r\n    ],\r\n  };\r\n\r\n  const formats = [\r\n    'header',\r\n    'bold', 'italic', 'strike', 'blockquote',\r\n    'list', 'bullet', 'indent',\r\n    'link', 'image'\r\n  ];\r\n\r\n  const POST_CATEGORIES = [\r\n    \"Adventure\",\r\n    \"Fiction\",\r\n    \"Horror\",\r\n    \"Mystery\",\r\n    \"Paranomal\",\r\n    \"ScienceFiction\", // Corrected value\r\n    \"Thriller\",\r\n    \"Fantasy\",\r\n    \"Humor\",\r\n    \"Romance\",\r\n    \"Historical Fiction\"\r\n  ];\r\n  \r\n  const createPost = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    const postData = new FormData();\r\n    postData.set('title', title);\r\n    postData.set('category', category === 'Science Fiction' ? 'ScienceFiction' : category); // Send 'ScienceFiction' instead of 'Science Fiction' if needed\r\n    postData.set('description', description);\r\n    postData.set('thumbnail', thumbnail);\r\n  \r\n    try {\r\n      const response = await axios.post(\r\n        `${process.env.REACT_APP_BASE_URL}/posts`,\r\n        postData,\r\n        { withCredentials: true, headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      if (response.status === 201) {\r\n        return navigate('/');\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      setError('An error occurred while creating the story.');\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <section className='create-post'>\r\n      <div className='container'>\r\n        <h2>Create a Story</h2>\r\n        {error && <p className='error'>{error}</p>}\r\n        \r\n        <form className=\"form create_form\" onSubmit={createPost}>\r\n          <input type='text' placeholder='Title' value={title} onChange={e => setTitle(e.target.value)} autoFocus/>\r\n          <select name='category' value={category} onChange={e=> setCategory(e.target.value)}>\r\n            {\r\n              POST_CATEGORIES.map(cat => <option key={cat}>{cat}</option>)\r\n            }\r\n          </select>\r\n          <ReactQuill modules={modules} formats={formats} value={description} onChange={setDescription} />\r\n          <input type=\"file\" onChange={e => setThumbnail(e.target.files[0])} accept='image/png,image/jpeg' />\r\n          <button type='submit' className='btn primary'>Create</button>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default CreateStory;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}